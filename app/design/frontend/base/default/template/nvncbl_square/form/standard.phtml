<?php

$_code = $this->getMethodCode();
$access_token = Mage::helper('nvncbl_square')->getAccessToken();
$enable_saved_cc = Mage::helper('nvncbl_square')->getEnableSavedCc();
$enable_apple_pay = Mage::helper('nvncbl_square')->getEnableApplePay();

?>

<ul class="form-list" id="payment_form_<?php echo $_code ?>" style="display:none;">

	<script type="text/javascript">

		var isRequestingNonce = true;

		var resource = document.createElement('script');
		resource.src = "https://js.squareup.com/v2/paymentform";
		var script = document.getElementsByTagName('script')[0];

		//if( jQuery('#payment_form_nvncbl_square').length > 0 ){
		if( typeof $('payment_form_nvncbl_square') != 'undefined' ){

			resource.onload = function(){

				var applicationId = '<?php echo Mage::helper('nvncbl_square')->getApplicationId(); ?>'; /* <-- Add your application's ID here */
				var locationId = "<?php echo Mage::helper('nvncbl_square')->getLocationId(); ?>";

				/* You can delete this 'if' statement. It's here to notify you that you need
				// to provide your application ID. */
				if (applicationId == '') {
					alert('You need to provide a value for the applicationId variable.');
				}

				/* Initializes the payment form. See the documentation for descriptions of
				// each of these parameters.*/
				paymentForm = new SqPaymentForm({
					applicationId: applicationId,
					locationId: locationId,
					inputClass: 'sq-input',
					inputStyles: [
					{
						fontSize: '15px'
					}
					],
					cardNumber: {
						elementId: 'sq-card-number',
						placeholder: '**** **** **** ****'
					},
					cvv: {
						elementId: 'sq-cvv',
						placeholder: 'CVV'
					},
					expirationDate: {
						elementId: 'sq-expiration-date',
						placeholder: 'MM/YY'
					},
					postalCode: {
						elementId: 'sq-postal-code'
					},
					<?php if( $enable_apple_pay ){ ?>
					applePay: {
						elementId: 'sq-apple-pay'
					},
					<?php } ?>
					callbacks: {

						<?php if( $enable_apple_pay ){ ?>

							  /*
							  * callback function: methodsSupported
							  * Triggered when: the page is loaded.
							  */
							  methodsSupported: function (methods) {
								var applePayBtn = document.getElementById('sq-apple-pay');
								var applePayLabel = document.getElementById('sq-apple-pay-label');
								// Only show the button if Apple Pay for Web is enabled
								// Otherwise, display the wallet not enabled message.
								if (methods.applePay === true) {
								  applePayBtn.style.display = 'inline-block';
								  applePayLabel.style.display = 'none' ;
								}
							  },
							  /*
							  * callback function: createPaymentRequest
							  * Triggered when: a digital wallet payment button is clicked.
							  */
							  createPaymentRequest: function () {
								var paymentRequestJson = {
								  requestShippingAddress: true,
								  currencyCode: "USD",
								  countryCode: "US",
								  total: {
									label: "MERCHANT NAME",
									amount: <?php echo Mage::getModel('checkout/session')->getQuote()->getGrandTotal(); ?>,
									pending: false
								  }
								};
								return paymentRequestJson ;
							  },

						<?php } ?>

						/* Called when the SqPaymentForm completes a request to generate a card
						// nonce, even if the request failed because of an error.*/
						cardNonceResponseReceived: function(errors, nonce, cardData) {

							if( isRequestingNonce ){

								if (errors) {
									//console.log( errors );
									/*console.log("Encountered errors:");

									/* This logs all errors encountered during nonce generation to the
									// Javascript console.*/
									errors.forEach(function(error) {
										alert( error.message );
									});

									/* No errors occurred. Extract the card nonce.*/
								} else {

									/* Delete this line and uncomment the lines below when you're ready
									// to start submitting nonces to your server.
									//console.log('Nonce received: ' + nonce);*/


									/*
									These lines assign the generated card nonce to a hidden input
									field, then submit that field to your server.
									Uncomment them when you're ready to test out submitting nonces.

									You'll also need to set the action attribute of the form element
									at the bottom of this sample, to correspond to the URL you want to
									submit the nonce to.
									*/
									 document.getElementById('card-nonce').value = nonce;
									 /*document.getElementById('nonce-form').submit();*/

									if( $$('#payment-buttons-container button').length > 0 ){ // Native Magento checkout
										payment.save();
									} else if( $$('#onestepcheckout-button-place-order').length > 0 ){ // Magestore OneStepCheckout
										oscPlaceOrder( $$('#onestepcheckout-button-place-order')[0] );
									} else if( $$('#onepage-payment .op-step-btn').length > 0 ){ // Hhn OneClickCheckout
										savePaymentMethod(true);
									} else if( $$('.btn-checkout').length > 0 ){ // TM Firecheckout
										checkout.save();
									} else if( $$('#amscheckout-submit').length > 0 ){ // Amscheckout
										completeCheckout();
									} else if( $$('#place-order-button').length > 0 ){ // MageCheckout SecuredCheckout
										securedCheckoutForm.validate() && (securedCheckoutForm.disablePlaceOrder(), securedCheckoutForm._placeOrderRequest());
									} else if( typeof awOSCForm == 'object' ){
										awOSCForm.placeOrder();
									}

								}

								isRequestingNonce = false;

							}

						},

						unsupportedBrowserDetected: function() {
							/* Fill in this callback to alert buyers when their browser is not supported.*/
						},

						/* Fill in these cases to respond to various events that can occur while a
						// buyer is using the payment form.*/
						inputEventReceived: function(inputEvent) {
							switch (inputEvent.eventType) {
								case 'focusClassAdded':
									// Handle as desired
									break;
								case 'focusClassRemoved':
									// Handle as desired
									break;
								case 'errorClassAdded':
									// Handle as desired
									break;
								case 'errorClassRemoved':
									// Handle as desired
									break;
								case 'cardBrandChanged':
									// Handle as desired
									break;
								case 'postalCodeChanged':
									// Handle as desired
									break;
							}
						},

						paymentFormLoaded: function() {

							/* "Next" or "Place Order" actions */
							if( $$('#payment-buttons-container button').length > 0 ){ // Native Magento checkout
								$$('#payment-buttons-container button')[0].stopObserving( 'click' );
								$$('#payment-buttons-container button')[0].onclick = null;
								$$('#payment-buttons-container button')[0].on( 'click', function(e){
									e.preventDefault();
									if( $$('input[name*="payment\[method\]"]:checked')[0].value == 'nvncbl_square' ){
										isRequestingNonce = false;
										if( $$('[name="payment[saved_cc_id]"]:checked').length == 0 ){
											if( !isRequestingNonce ){
												isRequestingNonce = true;
												paymentForm.requestCardNonce();
											}
										} else {
											payment.save();
										}
									} else {
										payment.save();
									}
								} );
							} else if( $$('#onestepcheckout-button-place-order').length > 0 ){ // Magestore OneStepCheckout
								$$('#onestepcheckout-button-place-order')[0].stopObserving( 'click' );
								$$('#onestepcheckout-button-place-order')[0].onclick = null;
								$$('#onestepcheckout-button-place-order')[0].on( 'click', function(e){
									e.preventDefault();
									if( $$('input[name*="payment\[method\]"]:checked')[0].value == 'nvncbl_square' ){
										isRequestingNonce = false;
										if( $$('[name="payment[saved_cc_id]"]:checked').length == 0 ){
											if( !isRequestingNonce ){
												isRequestingNonce = true;
												paymentForm.requestCardNonce();
											}
										} else {
											payment.save();
										}
									} else {
										oscPlaceOrder( $$('#onestepcheckout-button-place-order')[0] );
									}
								} );
							} else if( $$('#onepage-payment .op-step-btn').length > 0 ){ // Hhn OneClickCheckout
								$$('#onepage-payment .op-step-btn')[0].stopObserving( 'click' );
								$$('#onepage-payment .op-step-btn')[0].onclick = null;
								$$('#onepage-payment .op-step-btn')[0].on( 'click', function(e){
									e.preventDefault();
									if( $$('input[name*="payment\[method\]"]:checked')[0].value == 'nvncbl_square' ){
										isRequestingNonce = false;
										if( $$('[name="payment[saved_cc_id]"]:checked').length == 0 ){
											if( !isRequestingNonce ){
												isRequestingNonce = true;
												paymentForm.requestCardNonce();
											}
										} else {
											payment.save();
										}
									} else {
										savePaymentMethod(true);
									}
								} );
							} else if( $$('.btn-checkout').length > 0 ){ // TM Firecheckout
								$$('.btn-checkout')[0].stopObserving( 'click' );
								$$('.btn-checkout')[0].onclick = null;
								$$('.btn-checkout')[0].on( 'click', function(e){
									e.preventDefault();
									if( $$('input[name*="payment\[method\]"]:checked')[0].value == 'nvncbl_square' ){
										isRequestingNonce = false;
										if( $$('[name="payment[saved_cc_id]"]:checked').length == 0 ){
											if( !isRequestingNonce ){
												isRequestingNonce = true;
												paymentForm.requestCardNonce();
											}
										} else {
											payment.save();
										}
									} else {
										checkout.save();
									}
								} );
							} else if( $$('#amscheckout-submit').length > 0 ){ // Amscheckout
								$$('#amscheckout-submit')[0].stopObserving( 'click' );
								$$('#amscheckout-submit')[0].onclick = null;
								$$('#amscheckout-submit')[0].on( 'click', function(e){
									e.preventDefault();
									if( $$('input[name*="payment\[method\]"]:checked')[0].value == 'nvncbl_square' ){
										isRequestingNonce = false;
										if( $$('[name="payment[saved_cc_id]"]:checked').length == 0 ){
											if( !isRequestingNonce ){
												isRequestingNonce = true;
												paymentForm.requestCardNonce();
											}
										} else {
											payment.save();
										}
									} else {
										completeCheckout();
									}
								} );
							} else if( $$('#place-order-button').length > 0 ){ // MageCheckout SecuredCheckout
								securedCheckoutForm.placeOrderProcess = function(){
									if( $$('input[name*="payment\[method\]"]:checked')[0].value == 'nvncbl_square' ){
										isRequestingNonce = false;
										if( $$('[name="payment[saved_cc_id]"]:checked').length == 0 ){
											if( !isRequestingNonce ){
												isRequestingNonce = true;
												paymentForm.requestCardNonce();
											}
										} else {
											payment.save();
										}
									} else {
										securedCheckoutForm.validate() && (securedCheckoutForm.disablePlaceOrder(), securedCheckoutForm._placeOrderRequest());
									}
								}
							} else if( typeof awOSCForm == 'object' ){ // AW OneStepCheckout

								/* BEGIN Had to make some dynamic adjustments to awOSCForm JS */
								awOSCForm.placeOrder = function() {
									if( !this.placingOrder ){
										this.placingOrder = true;
										if (this.validate()) {
											this.showOverlay();
											this.showPleaseWaitNotice();
											this.disablePlaceOrderButton();
											this._sendPlaceOrderRequest();
										}
									}
								}
								awOSCForm.enablePlaceOrderButton = function() {
									awOSCForm.placingOrder = false;
									this.placeOrderButton.removeClassName(this.disabledClassName);
									this.placeOrderButton.disabled = false;
								}

								awOSCForm.placingOrder = false;
								/* END Had to make some dynamic adjustments to awOSCForm JS */

								$('aw-onestepcheckout-place-order-button').stopObserving( 'click' );
								$('aw-onestepcheckout-place-order-button').onclick = null;
								$('aw-onestepcheckout-place-order-button').on( 'click', function(e){
									e.preventDefault();
									if( $$('input[name*="payment\[method\]"]:checked')[0].value == 'nvncbl_square' ){
										isRequestingNonce = false;
										if( $$('[name="payment[saved_cc_id]"]:checked').length == 0 ){
											if( !isRequestingNonce ){
												isRequestingNonce = true;
												paymentForm.requestCardNonce();
											}
										} else {
											awOSCForm.placeOrder();
										}
									} else {
										awOSCForm.placeOrder();
									}
								} );
							}


							/* Saved card remove action */
							$$('.saved-card-remove').each( function( e ){
								if( e.readAttribute( 'onclick_assigned' ) != '1' ){
									e.writeAttribute( 'onclick_assigned', 1 );
									e.on( 'click', function(){
										new Ajax.Request( '<?php echo Mage::getUrl(); ?>nvncbl_square/index/removeSavedCard/card_id/'+ e.readAttribute( 'card_id' ), {
										  onSuccess: function(response) {
											var json = response.responseText.evalJSON();
											if( json.success == true ){
												e.up().remove();
											} else {
												alert( 'There was an error removing the card' );
											}
										  }
										});
									} );
								}
							} );

						},

					}
				});
				/*console.log( paymentForm );*/

				/* This function is called when a buyer clicks the Submit button on the webpage
				// to charge their card.*/
				function requestCardNonce(event) {

					/* This prevents the Submit button from submitting its associated form.
					// Instead, clicking the Submit button should tell the SqPaymentForm to generate
					// a card nonce, which the next line does.*/
					event.preventDefault();

					paymentForm.requestCardNonce();
				}
				//$('payment_form_nvncbl_square').show()
				paymentForm.build();

			}

		}

		script.parentNode.insertBefore(resource, script);

	</script>

	<style type="text/css">
		.sq-input {
		  border: 1px solid rgb(223, 223, 223);
		  outline-offset: -2px;
		  margin-bottom: 5px;
		}
		.sq-input--focus {
		  /* Indicates how form inputs should appear when they have focus */
		  outline: 5px auto rgb(59, 153, 252);
		}
		.sq-input--error {
		  /* Indicates how form inputs should appear when they contain invalid values */
		  outline: 5px auto rgb(255, 97, 97);
		}
		.sq-save-cc-yesno {
			width: 100%;
		}

		<?php if( $enable_apple_pay ){ ?>
			/* Customize the Apple Pay on the Web button */
			.button-apple-pay {
			  min-width: 200px;
			  min-height: 40px;
			  max-height: 64px;
			  padding: 0;
			  margin: 10px;
			  background-image: -webkit-named-image(apple-pay-logo-white);
			  background-color: black;
			  background-size: 100% 60%;
			  background-repeat: no-repeat;
			  background-position: 50% 50%;
			  border-radius: 5px;
			  cursor:pointer;
			  display: none;
			}
		<?php } ?>

	</style>

	<!--
	These div elements are the placeholder elements that are replaced by the
	SqPaymentForm's iframes.
	-->
	<label>Card Number</label>
	<div id="sq-card-number"></div>
	<label>Expiration Date</label>
	<div id="sq-expiration-date"></div>
	<label>Postal Code</label>
	<div id="sq-postal-code"></div>
	<label>CVV</label>
	<div id="sq-cvv"></div>

	<?php if( $enable_saved_cc ){ ?>
		<div id="sq-save-cc-yesno"><input type="checkbox" id="save-cc-yesno" name="payment[save-cc-yesno]" value="1" />&nbsp;<label for="save-cc-yesno" style="float:none;">Save for future use</label></div>
	<?php } ?>

	<form id="nonce-form" novalidate action="REPLACE_ME" method="post">

		<!--
		Whenever a nonce is generated, it's assigned as the value of this hidden
		input field.
		-->
		<input type="hidden" id="card-nonce" name="payment[nonce]">

		<!--
		Clicking this Submit button kicks off the process to generate a card nonce
		from the buyer's card information.
		-->

		<?php /*Commented out because we have set the existing "Continue" button to have paymentForm.requestCardNonce()
		<?php /*<input type="button" onclick="paymentForm.requestCardNonce(); return false;" value="Submit" />*/ ?>

	</form>

	<?php
		if( Mage::getSingleton('customer/session')->isLoggedIn() && $enable_saved_cc ){
			$customer = Mage::getSingleton('customer/session')->getCustomer();
			if( $customer->getSquareCustomerId() ){

				SquareConnect\Configuration::getDefaultConfiguration()->setAccessToken($access_token);
				$customer_api = new \SquareConnect\Api\CustomersApi();

				try {
					$retrieve_result = $customer_api->retrieveCustomer( $customer->getSquareCustomerId() );
					$square_customer = $retrieve_result->getCustomer();
					$cards = $square_customer->getCards();

					if( $cards ){
?>
						<br /><br />
<?php
						foreach( $cards as $card ){
?>
							<div class="saved-card-container">
								<input type="radio" name="payment[saved_cc_id]" id="saved-cc-<?php echo $card->getLast4(); ?>" value="<?php echo $card->getId(); ?>" />
								<label for="saved-cc-<?php echo $card->getLast4(); ?>" style="float:none;">Use saved <?php echo $card->getCardBrand(); ?> ending in <?php echo $card->getLast4(); ?></label>
								(<a class="saved-card-remove" href="javascript:void(0);" card_id="<?php echo $card->getId(); ?>">remove</a>)<br /><br />
							</div>
<?php
						}
					}
				} catch( Exception $e ){
					Mage::log( $e->getMessage() );
				}
			}
		}
	?>

	<?php if( $enable_apple_pay ){ ?>
		<div id="sq-walletbox">
			<p><strong>Pay with a Digital Wallet</strong></p>
			<div id="sq-apple-pay-label" class="wallet-not-enabled">Apple Pay for Web not supported</div>
			<!-- Placholder for Apple Pay for Web button -->
			<button id="sq-apple-pay" class="button-apple-pay"></button>
		</div>
	<?php } ?>

</ul>